@page "/filteredListView"

    <div id="@FilteredListViewId" class="filteredListView">
        <div class="filteredListViewFilterContainer">
            <input id="@FilterId" type="text" oninput="@OnInputScript" placeholder="@FilterPlaceholder" bind="@Filter" />
        </div>
        <div class="filteredListViewTableContainer">
            <table id="@TableId" class="filteredListViewTable">
                @if (RowHeaders != null && RowHeaders.Length > 0)
                {
                    <tr class="filteredListViewTableRow">
                        @foreach (string header in RowHeaders)
                        {
                            <th class="filteredListViewTableHeader">@header</th>
                        }
                    </tr>
                }
                @foreach (Row row in Rows)
                {
                    @if (string.IsNullOrEmpty(Filter) || row.FilterString.Contains(LowerFilter))
                    {
                        <tr class="filteredListViewTableRow">
                            @foreach (string cell in row.Cells)
                            {
                                <td class="filteredListViewTableData">@cell</td>
                            }
                        </tr>
                    }
                }
            </table>
        </div>
    </div>

@functions {
    [Parameter]
    string UniqueId { get; set; }
    [Parameter]
    string[] RowHeaders { get; set; }
    [Parameter]
    Row[] Rows { get; set; }
    [Parameter]
    string FilterPlaceholder { get; set; } = "Enter a filter";
    string FilteredListViewId => UniqueId + "FilteredListView";
    string FilterId => UniqueId + "Filter";
    string TableId => UniqueId + "Table";
    string OnInputScript => "deferredChange($('#" + FilterId + "')[0]);";
    string _filter;
    string _lowerFilter;
    string Filter
    {
        get
        {
            return _filter;
        }
        set
        {
            if (_filter != value)
            {
                _filter = value;
                _lowerFilter = _filter?.ToLower();
            }
        }
    }

    string LowerFilter => _lowerFilter;
}
